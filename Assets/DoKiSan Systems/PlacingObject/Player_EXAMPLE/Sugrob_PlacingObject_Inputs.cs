//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/DoKiSan Systems/PlacingObject/Player_EXAMPLE/Sugrob_PlacingObject_Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Sugrob_PlacingObject_Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Sugrob_PlacingObject_Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Sugrob_PlacingObject_Inputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""9a8009d3-421a-43a3-a51a-6a6fdbe58271"",
            ""actions"": [
                {
                    ""name"": ""DoneClick"",
                    ""type"": ""Button"",
                    ""id"": ""b737a4db-3328-497f-842a-c101ae4672dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelClick"",
                    ""type"": ""Button"",
                    ""id"": ""7dfb0903-90c2-42d4-992b-7623e06d0a05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotationObject"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b332d4c7-9a4a-4c73-b4bc-ad2ea4973b97"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bbfd69ae-364e-44ed-9309-d0d922870349"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoneClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c171c361-4324-4893-a253-5c1cc1a120c2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fdfc235-0caa-4c14-a550-3d64f027f544"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_DoneClick = m_Player.FindAction("DoneClick", throwIfNotFound: true);
        m_Player_CancelClick = m_Player.FindAction("CancelClick", throwIfNotFound: true);
        m_Player_RotationObject = m_Player.FindAction("RotationObject", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_DoneClick;
    private readonly InputAction m_Player_CancelClick;
    private readonly InputAction m_Player_RotationObject;
    public struct PlayerActions
    {
        private @Sugrob_PlacingObject_Inputs m_Wrapper;
        public PlayerActions(@Sugrob_PlacingObject_Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @DoneClick => m_Wrapper.m_Player_DoneClick;
        public InputAction @CancelClick => m_Wrapper.m_Player_CancelClick;
        public InputAction @RotationObject => m_Wrapper.m_Player_RotationObject;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @DoneClick.started += instance.OnDoneClick;
            @DoneClick.performed += instance.OnDoneClick;
            @DoneClick.canceled += instance.OnDoneClick;
            @CancelClick.started += instance.OnCancelClick;
            @CancelClick.performed += instance.OnCancelClick;
            @CancelClick.canceled += instance.OnCancelClick;
            @RotationObject.started += instance.OnRotationObject;
            @RotationObject.performed += instance.OnRotationObject;
            @RotationObject.canceled += instance.OnRotationObject;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @DoneClick.started -= instance.OnDoneClick;
            @DoneClick.performed -= instance.OnDoneClick;
            @DoneClick.canceled -= instance.OnDoneClick;
            @CancelClick.started -= instance.OnCancelClick;
            @CancelClick.performed -= instance.OnCancelClick;
            @CancelClick.canceled -= instance.OnCancelClick;
            @RotationObject.started -= instance.OnRotationObject;
            @RotationObject.performed -= instance.OnRotationObject;
            @RotationObject.canceled -= instance.OnRotationObject;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnDoneClick(InputAction.CallbackContext context);
        void OnCancelClick(InputAction.CallbackContext context);
        void OnRotationObject(InputAction.CallbackContext context);
    }
}
